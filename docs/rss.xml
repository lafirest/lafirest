<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title><![CDATA[Cogito, ergo sum]]></title>
<description><![CDATA[Cogito, ergo sum]]></description>
<link>https://lafirest.github.io/</link>
<lastBuildDate>Mon, 12 Jul 2021 02:39:28 +0800</lastBuildDate>
<item>
  <title><![CDATA[关于消息路由表实现的思考]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgbfb1d8b">1. 根和叶</a></li>
<li><a href="#org2b4130e">2. 也许我们不太合适?</a></li>
<li><a href="#org78f83ca">3. 还可以挽回么?</a>
<ul>
<li><a href="#org2cd91fc">3.1. 自动机</a></li>
<li><a href="#org79dc008">3.2. 平坦化结构</a></li>
<li><a href="#orgd1667af">3.3. 平衡树+映射表</a>
<ul>
<li><a href="#org59a3fba">3.3.1. 应用说明</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-orgbfb1d8b" class="outline-2">
<h2 id="orgbfb1d8b"><span class="section-number-2">1.</span> 根和叶</h2>
<div class="outline-text-2" id="text-1">
<p>
消息队列、文件系统、网络路由等场景经常需要处理路由信息，一般都是由路径节点名和分隔符做成,比如:<br>
</p>
<ul class="org-ul">
<li>/usr/lib/apache2/modules/httpd.exp</li>
<li>/topic/who/am/i</li>
</ul>
<p>
实际上这种结构，可以看作是从树的根节点到某个叶子节点的完整路径，也就是说这种结构的集合是一棵树<br>
然后加上路由信息常见使用场景都涉及到匹配，所以大多数情况，这里数据往往被实现为<a href="https://en.wikipedia.org/wiki/Trie">字典树</a>
</p>
</div>
</div>

<div id="outline-container-org2b4130e" class="outline-2">
<h2 id="org2b4130e"><span class="section-number-2">2.</span> 也许我们不太合适?</h2>
<div class="outline-text-2" id="text-2">
<p>
但我总感觉这种结构实现为字典树并不太好，路由信息和字典树应用对象有些很明显的不同:<br>
</p>
<ol class="org-ol">
<li>单词的长度是可预期的，并不会太长。但路由信息是不能预期长度的，可能会导致树的高度失控，当出现<br>
大量长路径且公共祖先遥远的情况下，树可能就退化为了链表</li>
<li>单词的基本单元是字符，是一个有限集，且西文情况下，这个集合很小，字典树结构能很好的进行处理。<br>
而路由信息的基本单元是单词，可以说是一个无限集，这里又有两种情况:<br>
<ol class="org-ol">
<li>坚持以单词为基本单元(相当于压缩字典树)，这个时候每个节点需要引入一个离散映射结构，用来存储 <b>单词</b> &rarr; <b>节点</b> 的信息<br>
这将导致内存耗用变得难以预测，还有一点就是如果每个节点的数据量不大，在某些离散映射的实现里，可能也会<br>
退化为线性搜索</li>
<li>以字符为基本单元，但这种情况下西文字符集一般是不够用的，所以常见的做法是转换为字节流进行处理<br>
每个节点需要256个槽，这对于字典来说还好，但是对于路由信息来说，内存耗用可能会变得难以接受，<br>
这种情况开源使用<a href="https://15721.courses.cs.cmu.edu/spring2016/papers/leis-icde2013.pdf">自适应基数树</a>进行解决。缺点就是数据调整时可能除非自适应调整，另外一个很严重的<br>
问题就是，路由信息的行为上主要还是以分隔符分割出来的单词作为基本单元，如果以字符为基本单元，<br>
进行模式匹配时，处理时稍微复杂些</li>
</ol></li>
</ol>
</div>
</div>

<div id="outline-container-org78f83ca" class="outline-2">
<h2 id="org78f83ca"><span class="section-number-2">3.</span> 还可以挽回么?</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org2cd91fc" class="outline-3">
<h3 id="org2cd91fc"><span class="section-number-3">3.1.</span> 自动机</h3>
<div class="outline-text-3" id="text-3-1">
<p>
自动机应该可以实现路由结构，而且搜索性能可能比上面的字典树实现都要快，但内存耗用也应该更加夸张，暂时不考虑
</p>
</div>
</div>

<div id="outline-container-org79dc008" class="outline-3">
<h3 id="org79dc008"><span class="section-number-3">3.2.</span> 平坦化结构</h3>
<div class="outline-text-3" id="text-3-2">
<p>
这种方法实现逻辑如下:
</p>
<ol class="org-ol">
<li>每条消息路由的，每个从根节点出发的子路径都创建一个映射</li>
<li>映射的实现有两种:<br>
例子: /i/am/some/topic
<ol class="org-ol">
<li><p>
只包含自己的直接子节点
这种情况下，对子树的搜索会以递归的方式完成
</p>
<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">key</th>
<th scope="col" class="org-left">value</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">i</td>
<td class="org-left">am</td>
</tr>

<tr>
<td class="org-left">i/am</td>
<td class="org-left">some</td>
</tr>

<tr>
<td class="org-left">i/am/some</td>
<td class="org-left">topic</td>
</tr>

<tr>
<td class="org-left">i/am/some/topic</td>
<td class="org-left">_</td>
</tr>
</tbody>
</table></li>

<li><p>
包含自己的直接子节点和所有后代节点
这种情况下，能很好的完成对某个层级的所有节点的匹配，同时又能很方便的找到所有后代节点
</p>
<table>


<colgroup>
<col  class="org-right">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">id</th>
<th scope="col" class="org-left">key</th>
<th scope="col" class="org-left">child</th>
<th scope="col" class="org-left">desc</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">1</td>
<td class="org-left">i</td>
<td class="org-left">am</td>
<td class="org-left">2, 3, 4</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-left">i/am</td>
<td class="org-left">some</td>
<td class="org-left">3, 4</td>
</tr>

<tr>
<td class="org-right">3</td>
<td class="org-left">i/am/some</td>
<td class="org-left">topic</td>
<td class="org-left">4</td>
</tr>

<tr>
<td class="org-right">4</td>
<td class="org-left">i/am/some/topic</td>
<td class="org-left">_</td>
<td class="org-left">_</td>
</tr>
</tbody>
</table></li>
</ol></li>
</ol>

<p>
这种方式能够很好的处理路由直接查找和子树查找，缺点就是内存耗用比较大
</p>
</div>
</div>

<div id="outline-container-orgd1667af" class="outline-3">
<h3 id="orgd1667af"><span class="section-number-3">3.3.</span> 平衡树+映射表</h3>
<div class="outline-text-3" id="text-3-3">
<p>
这种实现的逻辑如下:
</p>
<ol class="org-ol">
<li>引入一颗平衡树(红黑树或者B树)，和字典树一样，将路径中的每个单词做为一个节点,而有序规则如下:
<ol class="org-ol">
<li>子路径永远比父路径小</li>
<li>不同的路径比较时，从根节点依次进行比较，兄弟节点以单词大小进行比较(为了加速比较，可以对字典
进行预先哈希，比较时就直接比较哈希值，不过哈希算法需要保证顺序映射不会颠倒)</li>
</ol></li>
<li>引入一个映射表，类似<a href="#org79dc008">3.2</a>里面的思路，存储从 <b>根节点</b> &rarr; <b>某个子节点</b> 的 <b>路径</b> &rarr; <b>该节点</b> 的映射</li>
</ol>
</div>

<div id="outline-container-org59a3fba" class="outline-4">
<h4 id="org59a3fba"><span class="section-number-4">3.3.1.</span> 应用说明</h4>
<div class="outline-text-4" id="text-3-3-1">
</div>
<ol class="org-ol">
<li><a id="org41d01df"></a>直接搜索某个路径<br>
<div class="outline-text-5" id="text-3-3-1-1">
<p>
例子: /i/am/some/topic<br>
这种情况，直接查找映射表，通过映射表找到对应的节点即可
</p>
</div>
</li>

<li><a id="orgd09bfa3"></a>搜索子树<br>
<div class="outline-text-5" id="text-3-3-1-2">
<p>
例子: /i/am/+/topic/what<br>
这种情况，搜索分为两步:
</p>
<ol class="org-ol">
<li>通过映射表找到"<i>i/am</i>"这个路径对应的节点</li>
<li>从该节点开始搜索所有小于该节点，且树高差距为1的节点</li>
<li>收集这些节点的名称，比如nameA、nameB、nameC</li>
<li>将这些名称依次带入搜索路径的 <b>+</b> 处，形成所需路径, 比如"/i/am/nameA/topic/what"，这个时候直接<br>
在映射表中查找对应节点即可</li>
</ol>
</div>
</li>
</ol>
</div>
</div>
</div>
<div class="taglist"><a href="https://lafirest.github.io/tags.html">Tags</a>: <a href="https://lafirest.github.io/tag-字典树.html">字典树</a> <a href="https://lafirest.github.io/tag-路由表.html">路由表</a> </div>]]></description>
  <category><![CDATA[字典树]]></category>
  <category><![CDATA[路由表]]></category>
  <link>https://lafirest.github.io/topic_tree.html</link>
  <pubDate>Mon, 12 Jul 2021 02:39:28 +0800</pubDate>
</item>
<item>
  <title><![CDATA[使用Common Lisp理解Monad]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org3494483">1. 先挖坑</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org3494483" class="outline-2">
<h2 id="org3494483"><span class="section-number-2">1.</span> 先挖坑</h2>
</div>
<div class="taglist"></div>]]></description>
  <link>https://lafirest.github.io/monad_in_lisp.html</link>
  <pubDate>Mon, 12 Jul 2021 02:39:28 +0800</pubDate>
</item>
<item>
  <title><![CDATA[通过C#理解Monad]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org4ab1b8d">1. 关于什么是Monad</a></li>
<li><a href="#orgabee10d">2. 计算表达式</a>
<ul>
<li><a href="#orgd231134">2.1. 对 &gamma; 的扩展</a></li>
</ul>
</li>
<li><a href="#org348132e">3. 回到Monad</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org4ab1b8d" class="outline-2">
<h2 id="org4ab1b8d"><span class="section-number-2">1.</span> 关于什么是Monad</h2>
<div class="outline-text-2" id="text-1">
<p>
讲解Monad是什么的文章很多，但是基本上都是以范畴论的概念来展开说明的,这导致了理解成本特别高<br>
从一个小坑掉入了一个大坑<br>
这里不谈理论，将通过下面的C#(伪)代码来说明什么是Monad，所以其实并不严谨<br>
</p>
<div class="org-src-container">
<pre class="src src-csharp"><span style="color: #F0DFAF; font-weight: bold;">public</span> <span style="color: #F0DFAF; font-weight: bold;">delegate</span> <span style="color: #7CB8BB;">Gold</span> <span style="color: #93E0E3;">F</span><span style="color: #DCDCCC;">(</span><span style="color: #7CB8BB;">int</span> <span style="color: #DFAF8F;">x</span><span style="color: #DCDCCC;">)</span>;
<span style="color: #F0DFAF; font-weight: bold;">public</span> <span style="color: #F0DFAF; font-weight: bold;">class</span> <span style="color: #7CB8BB;">Gold</span>
<span style="color: #DCDCCC;">{</span>
    <span style="color: #F0DFAF; font-weight: bold;">private</span> <span style="color: #7CB8BB;">int</span> <span style="color: #DFAF8F;">gold</span>;

    <span style="color: #F0DFAF; font-weight: bold;">public</span> <span style="color: #93E0E3;">Gold</span><span style="color: #BFEBBF;">(</span><span style="color: #7CB8BB;">int</span> <span style="color: #DFAF8F;">x</span><span style="color: #BFEBBF;">)</span> =&gt; gold = x;

    <span style="color: #F0DFAF; font-weight: bold;">public</span> <span style="color: #F0DFAF; font-weight: bold;">static</span> <span style="color: #7CB8BB;">Gold</span> <span style="color: #F0DFAF; font-weight: bold;">operator</span> + <span style="color: #BFEBBF;">(</span><span style="color: #7CB8BB;">F</span> <span style="color: #DFAF8F;">f</span><span style="color: #BFEBBF;">)</span> =&gt; <span style="color: #93E0E3;">f</span><span style="color: #BFEBBF;">(</span><span style="color: #7CB8BB;">gold</span><span style="color: #BFEBBF;">)</span>;

    <span style="color: #F0DFAF; font-weight: bold;">public</span> <span style="color: #F0DFAF; font-weight: bold;">static</span> <span style="color: #7CB8BB;">Gold</span> <span style="color: #93E0E3;">Double</span><span style="color: #BFEBBF;">(</span><span style="color: #7CB8BB;">int</span> <span style="color: #DFAF8F;">x</span><span style="color: #BFEBBF;">)</span> =&gt; <span style="color: #F0DFAF; font-weight: bold;">new</span> <span style="color: #7CB8BB;">Gold</span><span style="color: #BFEBBF;">(</span>x * 2<span style="color: #BFEBBF;">)</span>;
    <span style="color: #F0DFAF; font-weight: bold;">public</span> <span style="color: #F0DFAF; font-weight: bold;">static</span> <span style="color: #7CB8BB;">Gold</span> <span style="color: #93E0E3;">Zero</span><span style="color: #BFEBBF;">(</span><span style="color: #7CB8BB;">int</span> <span style="color: #DFAF8F;">x</span><span style="color: #BFEBBF;">)</span> =&gt; <span style="color: #F0DFAF; font-weight: bold;">new</span> <span style="color: #7CB8BB;">Gold</span><span style="color: #BFEBBF;">(</span>0<span style="color: #BFEBBF;">)</span>;
<span style="color: #DCDCCC;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgabee10d" class="outline-2">
<h2 id="orgabee10d"><span class="section-number-2">2.</span> 计算表达式</h2>
<div class="outline-text-2" id="text-2">
<p>
微软在设计F#时，为了避免使用Monad这个单词，发明了「计算表达式」这个概念，这个概念其实很好的反映了Monad的本质<br>
先来看个小学级别的计算式子: &alpha; = 1 + 2 + 3 + 4 + 5<br>
然后我们把里面的数字全部换成Gold类型，得到: &beta; = Gold + Gold + Gold + Gold + Gold<br>
但是上面我们并没有实现Gold + Gold, 而是实现了Gold + F, 不过 Gold + F -&gt; Gold, 所以我们可以将 &beta; 里面的Gold替换为Gold + F,<br>
从而得到: &gamma; = (((Gold + F) + F) + F) + F<br>
</p>
</div>

<div id="outline-container-orgd231134" class="outline-3">
<h3 id="orgd231134"><span class="section-number-3">2.1.</span> 对 &gamma; 的扩展</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li>首先我们能看到，在上面的代码中，F可以是「Double」也可以是「Zero」,也就是这个表达式并不关心执行的具体流程，只要该流程满足F的声明即可<br></li>
<li>其次我们将表达式中的Gold 换成 Diamond、HP、MP，并不影响 &gamma; 这个表达式的运算，也就是说这个表达式并不关心作用对象的类型<br></li>
<li>最后，我们可以发现 &gamma; 这个表达式并不关心Gold 里面是int gold还是long gold,或者string gold, 也就是说这个表达式并不关心对象的内部环境<br></li>
</ol>

<p>
总结:<br>
</p>
<ul class="org-ul">
<li>我们将1中的执行流程用F表示<br></li>
<li>2中提到的对象用M表示<br></li>
<li>3中提到的对象内部环境用a表示<br></li>
</ul>
<p>
那么得到新的表达式: &delta; = ((((M a) + F) + F) + F)<br>
其中: F = a -&gt; M a<br>
</p>
</div>
</div>
</div>

<div id="outline-container-org348132e" class="outline-2">
<h2 id="org348132e"><span class="section-number-2">3.</span> 回到Monad</h2>
<div class="outline-text-2" id="text-3">
<p>
上面的公式 &delta; 其实和Haskell中的Monad很类似了，Monad可以看作是对公式 &delta; 这一类运算的抽象<br>
从cshap的角度理解, Monad可以看作是一个接口或者抽象类, (伪)代码如下:<br>
</p>
<div class="org-src-container">
<pre class="src src-csharp"><span style="color: #F0DFAF; font-weight: bold;">public</span> <span style="color: #F0DFAF; font-weight: bold;">interface</span> <span style="color: #7CB8BB;">Monad</span><span style="color: #DCDCCC;">&lt;</span><span style="color: #7CB8BB;">T</span><span style="color: #BFEBBF;">&lt;</span><span style="color: #7CB8BB;">U</span><span style="color: #BFEBBF;">&gt;</span><span style="color: #DCDCCC;">&gt;</span>
<span style="color: #DCDCCC;">{</span>
    <span style="color: #7CB8BB;">Monad</span><span style="color: #BFEBBF;">&lt;</span><span style="color: #7CB8BB;">T</span><span style="color: #D0BF8F;">&lt;</span><span style="color: #7CB8BB;">U</span><span style="color: #D0BF8F;">&gt;</span><span style="color: #BFEBBF;">&gt;</span> <span style="color: #93E0E3;">Return</span><span style="color: #BFEBBF;">(</span><span style="color: #7CB8BB;">U</span> <span style="color: #DFAF8F;">a</span><span style="color: #BFEBBF;">)</span>;
    <span style="color: #F0DFAF; font-weight: bold;">static</span> <span style="color: #7CB8BB;">Monad</span><span style="color: #BFEBBF;">&lt;</span><span style="color: #7CB8BB;">T</span><span style="color: #D0BF8F;">&lt;</span><span style="color: #7CB8BB;">U</span><span style="color: #D0BF8F;">&gt;</span><span style="color: #BFEBBF;">&gt;</span> <span style="color: #93E0E3;">Bind</span> <span style="color: #BFEBBF;">(</span><span style="color: #7CB8BB;">Monad</span><span style="color: #D0BF8F;">&lt;</span><span style="color: #7CB8BB;">T</span><span style="color: #93E0E3;">&lt;</span><span style="color: #7CB8BB;">U</span><span style="color: #93E0E3;">&gt;</span><span style="color: #D0BF8F;">&gt;</span> <span style="color: #DFAF8F;">m</span>, Func&lt;U, Monad&lt;T&lt;U&gt;&gt;&gt; f<span style="color: #BFEBBF;">)</span>
<span style="color: #DCDCCC;">}</span>

</pre>
</div>
<p>
其中:<br>
</p>
<ul class="org-ul">
<li>U是被包裹的类,比如Gold里面的gold的类型int<br></li>
<li>其次T是外层的包裹类，比如Gold<br></li>
<li>然后「Return」用于将一个被包裹的类提升为一个Monad的类<br></li>
<li>然后 「Bind」则是 &delta; 中的 「+」一个二元运算<br></li>
</ul>
<p>
这些基本上也是Haskell中实现一个Monad需要完成的"接口"实现(当然上面的代码在C#里面是没法运行的,C#只能有限的模拟Haskell中的moand)<br>
也就是说只要有类和该类的行为，满足或者说实现这个接口，这个类就可以被看作是一个Monad<br>
所以，抛开理论上的定义，对Monad的使用可以看作是通过二元运算，串联起来的一连串的运算，而不同的二元运算可以实现不同的逻辑，从而达到对运行流程的控制、对副作用的管理等功能<br>
</p>
</div>
</div>
<div class="taglist"><a href="https://lafirest.github.io/tags.html">Tags</a>: <a href="https://lafirest.github.io/tag-monad.html">Monad</a> </div>]]></description>
  <category><![CDATA[Monad]]></category>
  <link>https://lafirest.github.io/intro_monad_csharp.html</link>
  <pubDate>Mon, 12 Jul 2021 02:39:28 +0800</pubDate>
</item>
<item>
  <title><![CDATA[C#的async/await和mona]]></title>
  <description><![CDATA[
<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org1f0bc1b">1. 挖坑</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org1f0bc1b" class="outline-2">
<h2 id="org1f0bc1b"><span class="section-number-2">1.</span> 挖坑</h2>
</div>
<div class="taglist"></div>]]></description>
  <link>https://lafirest.github.io/csharp_moand.html</link>
  <pubDate>Mon, 12 Jul 2021 02:39:28 +0800</pubDate>
</item>
</channel>
</rss>
